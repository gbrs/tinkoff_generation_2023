Задача A: Пузырьковая сортировка

#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, a;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++) {
        cin >> a;
        v[i] = a;
    }
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (v[j] > v[j + 1]) {
                swap(v[j], v[j + 1]);
            }
        }
    }
    for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
    }
    return 0;
}



Задача B: Сортировка вставками

#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, a, j;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++) {
        cin >> a;
        v[i] = a;
    }
    for (int i = 1; i < n; i++) {
        a = v[i];
        j = i - 1;
        while (j >= 0 && a < v[j]) {
            v[j + 1] = v[j];
            j--;
        }
        v[j + 1] = a;
    }
    for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
    }
    return 0;
}



Задача C: Сортировка выбором

#include <bits/stdc++.h>

using namespace std;

int main() {
    int n, a;
    cin >> n;
    vector<int> v(n);
    for (int i = 0; i < n; i++) {
        cin >> a;
        v[i] = a;
    }
    for (int i = 0; i < n - 1; i++) {
        a = 0;
        for (int j = 1; j < n - i; j++) {
            if (v[a] < v[j]) {
                a = j;
            }
        }
        swap(v[a], v[n - 1 - i]);
    }
    for (int i = 0; i < n; i++) {
        cout << v[i] << " ";
    }
    return 0;
}



Задача D: Результаты олимпиады

#include <bits/stdc++.h>

using namespace std;

void f(std::vector<vector<int>> &v, int left, int mid, int right) {
    int i, j, k;
    int lenl = mid - left + 1;
    int lenr = right - mid;
    std::vector<vector<int>> vl(lenl, vector<int> (2, 0)), vr(lenr, vector<int> (2, 0));
    for (i = 0; i < lenl; i++) {
        vl[i][0] = v[left + i][0];
        vl[i][1] = v[left + i][1];
    }
    for (j = 0; j < lenr; j++) {
        vr[j][0] = v[mid + 1 + j][0];
        vr[j][1] = v[mid + 1 + j][1];
    }
    i = 0;
    j = 0;
    k = left;
    while (i < lenl && j < lenr) {
        if ((vl[i][1] > vr[j][1]) || ((vl[i][1] == vr[j][1]) && (vl[i][0] < vr[j][0]))) {
            v[k] = vl[i];
            i++;
        } else {
            v[k] = vr[j];
            j++;
        }
        k++;
    }
    while (i < lenl) {
        v[k] = vl[i];
        i++;
        k++;
    }
    while (j < lenr) {
        v[k] = vr[j];
        j++;
        k++;
    }
}

void f1(std::vector<vector<int>> &v, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        f1(v, left, mid);
        f1(v, mid + 1, right);
        f(v, left, mid, right);
    }
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    int n, a;
    cin >> n;
    vector<vector <int>> v(n, vector<int> (2, 0));

    for (int i = 0; i < n; i++) {
        cin >> v[i][0];
        cin >> v[i][1];
    }

    f1(v, 0, n - 1);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < 2; j++) {
            cout << v[i][j] << " ";
        }
        cout << '\n';
    }
    return 0;
}



Задача E: Сортировка подсчетом

#include <bits/stdc++.h>

using namespace std;

int main() {
    vector <int> v(20001, 0);
    int n, a;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a;
        v[a + 10000] += 1;
    }
    for (int i = 0; i < 20001; i++) {
        for (int j = 0; j < v[i]; j++) {
            cout << i - 10000 << " ";
        }
    }
    return 0;
}



Задача F: Анаграммы

#include <bits/stdc++.h>

using namespace std;

int main() {
    map<char, int> m, m1;
    int a;
    string s;
    cin >> s;
    for (int i = 0; i < int(s.size()); i++) {
        m[s[i]] += 1;
    }
    cin >> s;
    for (int i = 0; i < int(s.size()); i++) {
        m1[s[i]] += 1;
    }
    a = 1;
    if (m.size() == m1.size()) {
        a = 0;
        for (auto i : m) {
            if ((m1.find(i.first) == m1.end()) || (i.second != m1[i.first])) {
                a = 1;
                break;
            }
        }
    }
    if (a == 0) {
        cout << "YES";
    } else {
        cout << "NO";
    }
    return 0;
}



Задача G: Разброс

#include <bits/stdc++.h>

using namespace std;

int main() {
    map<int, int> m;
    int n, a;
    cin >> n;
    for (int i = 0; i < n; i++) {
        cin >> a;
        m[a] += 1;
    }
    for (auto i : m) {
        for (int j = 0; j < i.second; j++) {
            cout << i.first << " ";
        }
    }
    return 0;
}



Задача H: Сортировка слиянием

#include <iostream>
#include <vector>

void f(std::vector<int> &v, int left, int mid, int right) {
    int i, j, k;
    int lenl = mid - left + 1;
    int lenr = right - mid;
    std::vector <int> vl(lenl), vr(lenr);
    for (i = 0; i < lenl; i++) {
        vl[i] = v[left + i];
    }
    for (j = 0; j < lenr; j++) {
        vr[j] = v[mid + 1 + j];
    }
    i = 0;
    j = 0;
    k = left;
    while (i < lenl && j < lenr) {
        if (vl[i] <= vr[j]) {
            v[k] = vl[i];
            i++;
        } else {
            v[k] = vr[j];
            j++;
        }
        k++;
    }
    while (i < lenl) {
        v[k] = vl[i];
        i++;
        k++;
    }
    while (j < lenr) {
        v[k] = vr[j];
        j++;
        k++;
    }
}

void f1(std::vector<int> &v, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        f1(v, left, mid);
        f1(v, mid + 1, right);
        f(v, left, mid, right);
    }
}

int main() {
    int n;
    std::cin >> n;
    std::vector<int> v(n);
    for (int i = 0; i < n; i++) {
        std::cin >> v[i];
    }
    f1(v, 0, n - 1);
    for (auto i : v) {
        std::cout << i << ' ';
    }
}



Задача I: Зеркальный код

#include<iostream>
#include<vector>

int main() {
    int n;
    std::string s, x;
    std::vector<int> v(26);
    std::cin >> n;
    std::cin >> s;
    for (auto i : s) {
        v[i - 'A'] += 1;
    }
    for (int i = 0; i < 26; i++) {
        for (int j = 0; j < v[i] / 2; j++) {
            x.push_back('A' + i);
        }
    }
    for (int i = 0; i < 26; i++) {
        if (v[i] % 2 == 1) {
            x.push_back('A' + i);
            break;
        }
    }
    for (int i = 25; i >= 0; i--) {
        for (int j = 0; j < v[i] / 2; j++) {
            x.push_back('A' + i);
        }
    }
    std::cout << x;
    return 0;
}



Задача J: Перевозки на беспилотниках

#include <iostream>
#include <vector>

void f(std::vector<int> &v, int left, int mid, int right) {
    int i, j, k;
    int lenl = mid - left + 1;
    int lenr = right - mid;
    std::vector <int> vl(lenl), vr(lenr);
    for (i = 0; i < lenl; i++) {
        vl[i] = v[left + i];
    }
    for (j = 0; j < lenr; j++) {
        vr[j] = v[mid + 1 + j];
    }
    i = 0;
    j = 0;
    k = left;
    while (i < lenl && j < lenr) {
        if (vl[i] <= vr[j]) {
            v[k] = vl[i];
            i++;
        } else {
            v[k] = vr[j];
            j++;
        }
        k++;
    }
    while (i < lenl) {
        v[k] = vl[i];
        i++;
        k++;
    }
    while (j < lenr) {
        v[k] = vr[j];
        j++;
        k++;
    }
}

void f1(std::vector<int> &v, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        f1(v, left, mid);
        f1(v, mid + 1, right);
        f(v, left, mid, right);
    }
}

int main() {
    int n, m, k, x, j, jj;
    j = 0;
    jj = 0;
    x = 0;
    std::cin >> n >> m;
    std::vector<int> v(n * m);
    for (int i = 0; i < n * m; i++) {
        std::cin >> v[i];
    }
    f1(v, 0, n * m - 1);
    std::cin >> k;
    std::vector<int> v1(k);
    for (int i = 0; i < k; i++) {
        std::cin >> v1[i];
    }
    f1(v1, 0, k - 1);
    while (j < m * n && jj < k) {
        if (v[j] >= v1[jj]) {
            x++;
            jj++;
        }
        j++;
    }
    std::cout << x;
}



Задача K: Пирамиды майя

#include <iostream>
#include <vector>

void f(std::vector<int> &v, int left, int mid, int right) {
    int i, j, k;
    int lenl = mid - left + 1;
    int lenr = right - mid;
    std::vector <int> vl(lenl), vr(lenr);
    for (i = 0; i < lenl; i++) {
        vl[i] = v[left + i];
    }
    for (j = 0; j < lenr; j++) {
        vr[j] = v[mid + 1 + j];
    }
    i = 0;
    j = 0;
    k = left;
    while (i < lenl && j < lenr) {
        if (vl[i] <= vr[j]) {
            v[k] = vl[i];
            i++;
        } else {
            v[k] = vr[j];
            j++;
        }
        k++;
    }
    while (i < lenl) {
        v[k] = vl[i];
        i++;
        k++;
    }
    while (j < lenr) {
        v[k] = vr[j];
        j++;
        k++;
    }
}

void f1(std::vector<int> &v, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        f1(v, left, mid);
        f1(v, mid + 1, right);
        f(v, left, mid, right);
    }
}

int main() {
    int n, m, j, pred, sum;
    std::cin >> n >> m;
    std::vector<int> v(m);
    for (int i = 0; i < m; i++) {
        std::cin >> v[i];
    }
    f1(v, 0, m - 1);
    j = m - 1;
    pred = 9999;
    sum = 0;
    while (j >= 0 && v[j] >= n) {
        if (pred - 3 >= v[j]) {
            sum++;
            pred = v[j];
        }
        j--;
    }
    std::cout << sum;
}

Задача M. Египетские пирамиды
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Point {
    long long x, y;
};

struct Event {
    long long x;
    int polygon_index;

    bool operator<(const Event& other) const {
        return x < other.x;
    }
};

int winding_number(const vector<Point>& polygon, long long x, long long y) {
    int wn = 0;
    int n = polygon.size();
    for (int i = 0; i < n; ++i) {
        const Point& p1 = polygon[i];
        const Point& p2 = polygon[(i + 1) % n];

        if (p1.y <= y) {
            if (p2.y > y && (p2.x - p1.x) * (y - p1.y) - (p2.y - p1.y) * (x - p1.x) > 0) {
                ++wn;
            }
        } else {
            if (p2.y <= y && (p2.x - p1.x) * (y - p1.y) - (p2.y - p1.y) * (x - p1.x) < 0) {
                --wn;
            }
        }
    }
    return wn;
}

bool is_inside(const vector<Point>& outer, const vector<Point>& inner) {
    const Point& p = inner[0];
    return winding_number(outer, p.x, p.y) != 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int n;
    cin >> n;

    vector<vector<Point>> polygons(n);
    vector<Event> events(n);

    for (int i = 0; i < n; ++i) {
        int c;
        cin >> c;
        polygons[i].resize(c);
        long long min_x = 2000000001LL;
        for (int j = 0; j < c; ++j) {
            cin >> polygons[i][j].x >> polygons[i][j].y;
            min_x = min(min_x, polygons[i][j].x);
        }
        events[i] = {min_x, i};
    }

    sort(events.begin(), events.end());

    vector<int> counts(n, 0);
    vector<int> active_polygons;

    for (const auto& event : events) {
        int i = event.polygon_index;

        for (int j : active_polygons) {
            if (i != j) {
                if (is_inside(polygons[j], polygons[i])) {
                    counts[i]++;
                }
            }
        }

        active_polygons.push_back(i);
    }

    for (int i = 0; i < n; ++i) {
        cout << counts[i] << " ";
    }
    cout << endl;

    return 0;
}



Задача O: Quick sort

#include<iostream>
#include<vector>

int split(std::vector<int> &v, int left, int right) {
    int baza = v[right];
    int l = left;
    for (int r = left; r < right; r++) {
        if (v[r] <= baza) {
            std::swap(v[l], v[r]);
            l++;
        }
    }
    std::swap(v[l], v[right]);
    return l;
}

void quick_sort(std::vector<int> &v, int left, int right) {
    if (left < right) {
        int baza = split(v, left, right);
        quick_sort(v, left, baza - 1);
        quick_sort(v, baza + 1, right);
    }
}


int main() {
    int n;
    std::cin >> n;
    std::vector <int> v(n);
    for (int i = 0; i < n; i++) {
        std::cin >> v[i];
    }
    quick_sort(v, 0, n - 1);
    for (auto i : v) {
        std::cout << i << " ";
    }
    return 0;
}



